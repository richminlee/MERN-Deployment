{"version":3,"sources":["components/DeleteButton.js","components/BeltList.js","views/Main.js","components/BeltForm.js","views/Create.js","App.js","serviceWorker.js","index.js"],"names":["props","beltId","successCallback","onClick","e","axios","delete","then","res","useState","belts","setBelts","useEffect","console","log","get","data","sort","a","b","dueDate","statusHandler","status","id","idx","put","className","map","belt","key","project","moment","format","Date","style","color","_id","DeleteButton","filter","BeltList","removeFromDom","navigate","initialProject","initialDueDate","onSubmitProp","initialStatus","errors","setProject","setDueDate","err","index","onSubmit","preventDefault","type","name","value","onChange","target","setErrors","to","BeltForm","post","catch","errorResponse","response","errorArr","Object","keys","push","message","App","Main","path","Create","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.11d91fcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nexport default props => {\r\n    const { beltId, successCallback } = props;\r\n    const deleteBelt = e => {\r\n        axios.delete('http://localhost:8000/api/belt/' + beltId)\r\n        .then(res=>{\r\n            successCallback();\r\n        })\r\n    }\r\n    return(\r\n        <button onClick={deleteBelt}>\r\n            Remove Project\r\n        </button>\r\n    )\r\n}","import React, {useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport DeleteButton from './DeleteButton';\r\nexport default props => {\r\n    const [belts, setBelts] = useState([]);\r\n    useEffect(() => {\r\n        console.log(\"hello\");\r\n        axios.get('http://localhost:8000/api/belt')\r\n        .then(res => setBelts(\r\n            res.data.sort((a,b) => (a.dueDate > b.dueDate)? 1: -1)\r\n            ))\r\n\r\n    }, [])\r\n    const removeFromDom = beltId => {\r\n        setBelts(belts.filter(belt => belt._id !== beltId))\r\n    }\r\n    const statusHandler = (status, id, idx) => {\r\n        axios.put('http://localhost:8000/api/belt/' + id, status)\r\n        .then(res => {\r\n            [...belts][idx].status++ ;\r\n            setBelts([...belts]);\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"container border border-dark\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col border border-dark h3\">Backlog</div>\r\n                                <div className=\"col border border-dark h3\">In Progress</div>\r\n                                <div className=\"col border border-dark h3\">Completed</div>\r\n                            </div>\r\n                            \r\n            {belts.map((belt, idx)=>{ \r\n                return(\r\n                    <div key={idx} className=\"row\">\r\n                        <div className=\"col border border-dark\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col \">\r\n                                    {\r\n                                        belt.status === 0?\r\n                                        <div>\r\n                                        <div className=\"row h5\">{belt.project}</div>\r\n                                        <div className=\"row\">\r\n                                            {\r\n                                            moment(belt.dueDate).format('YYYY-MM-DD') >= moment(new Date ()).format('YYYY-MM-DD')?\r\n                                            <div> {moment(belt.dueDate).format('MM-DD-YYYY')} </div>\r\n                                            :\r\n                                            <div style={{color:\"red\"}}> {moment(belt.dueDate).format('MM-DD-YYYY')} </div>\r\n                                            }\r\n                                            </div>\r\n                                        <button onClick={(e)=> {statusHandler(belt.status, belt._id, idx)}}>Start Project</button>\r\n                                        </div>\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col border border-dark\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col \">\r\n                                    {\r\n                                        belt.status === 1?\r\n                                        <div>\r\n                                        <div className=\"row h5\">{belt.project}</div>\r\n                                        <div className=\"row\">\r\n                                            {\r\n                                            moment(belt.dueDate).format('YYYY-MM-DD') >= moment(new Date ()).format('YYYY-MM-DD')?\r\n                                            <div> {moment(belt.dueDate).format('MM-DD-YYYY')} </div>\r\n                                            :\r\n                                            <div style={{color:\"red\"}}> {moment(belt.dueDate).format('MM-DD-YYYY')} </div>\r\n                                            }\r\n                                        </div>\r\n                                        <button onClick={(e)=> {statusHandler(belt.status, belt._id, idx)}}>Move to Completed</button>\r\n                                        </div>\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col border border-dark\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col \">\r\n                                    {\r\n                                        belt.status === 2?\r\n                                        <div>\r\n                                        <div className=\"row h5\">{belt.project}</div>\r\n                                        <div className=\"row\">\r\n                                            {\r\n                                            moment(belt.dueDate).format('YYYY-MM-DD') >= moment(new Date ()).format('YYYY-MM-DD')?\r\n                                            <div> {moment(belt.dueDate).format('MM-DD-YYYY')} </div>\r\n                                            :\r\n                                            <div style={{color:\"red\"}}> {moment(belt.dueDate).format('MM-DD-YYYY')} </div>\r\n                                            }\r\n                                        </div>\r\n                                        <DeleteButton beltId={belt._id} successCallback={() => removeFromDom(belt._id)}/>\r\n                                        </div>\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n            )\r\n})}\r\n        </div>\r\n\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport BeltList from '../components/BeltList';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\nexport default () => {\r\n    const [belts, setBelts] = useState([]);\r\n\r\n    useEffect (() => {\r\n        axios.get('http://localhost:8000/api/belt')\r\n        .then(res=>{\r\n            setBelts(res.data);\r\n        });\r\n    }, [])\r\n    const removeFromDom = beltId => {\r\n        setBelts(belts.filter(belt => belt._id !== beltId))\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Project Manager</h1>\r\n            <BeltList  belts = {belts} removeFromDom = {removeFromDom}/>\r\n            <button onClick={(e) => navigate(\"/new\")}>Add New Project</button>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { navigate } from '@reach/router';\r\n\r\nexport default props => {\r\n    const { initialProject, initialDueDate, initialStatus, onSubmitProp, errors } = props;\r\n    const [project, setProject] = useState(initialProject);\r\n    const [dueDate, setDueDate] = useState(initialDueDate);\r\n    const [status, setStatus] = useState();\r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        onSubmitProp({project, dueDate, status});\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col\">{errors.map((err, index) => <p key={index}>{err}</p>)}</div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-3\"></div>\r\n            <div className=\"col-6 border border-dark p-4\">\r\n        <form onSubmit={onSubmitHandler}>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <label>Project </label>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <input type=\"text\" name=\"project\" value={project} onChange = {(e) => setProject(e.target.value)}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                <label>Due Date</label>\r\n                </div>\r\n                <div className=\"col\">\r\n                <input type=\"date\" name=\"dueDate\" value={dueDate} onChange = {(e) => setDueDate(e.target.value)}/>\r\n                </div>\r\n            </div>\r\n            <input type=\"submit\" value=\"Plan Project\"/>\r\n        </form>\r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport BeltForm from '../components/BeltForm';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\nexport default () => {\r\n    const [belts, setBelts] = useState([]);\r\n    const [errors, setErrors] = useState([]); \r\n\r\n    const createBelt = belt => {\r\n        axios.post('http://localhost:8000/api/belt', belt)\r\n        .then(res => {\r\n            setBelts([...belts, res.data]);\r\n            navigate(\"/\");\r\n        })\r\n        .catch(err=>{\r\n            const errorResponse = err.response.data.errors;\r\n            const errorArr = [];\r\n            for( const key of Object.keys(errorResponse)){\r\n                errorArr.push(errorResponse[key].message)\r\n            }\r\n            setErrors(errorArr);\r\n        })\r\n    }\r\n    return(\r\n        <div>\r\n            <h1>Project Manager</h1>\r\n            <Link to = {\"/\"}>Back to Dashboard</Link>\r\n            <p>Plan a new project</p>\r\n            <BeltForm errors={errors} onSubmitProp = {createBelt} initialProject = \"\" initialDueDate=\"\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport Main from './views/Main';\nimport Create from './views/Create';\nimport { Router } from '@reach/router';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <Main path=\"/\" />\n      <Create path=\"/new\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}